#include<iostream>
using namespace std;
//构建链表结点模板
template<class T>
class LNode {
public:
	T data;
	LNode<T>* next;
	LNode(const T info, LNode<T>* nextValue=NULL) {
		data = info;
		next = nextValue;
	}
	LNode(LNode<T> *nextValue=NULL) {
		next = nextValue;
	}
};
//构建链式栈的类模板
template<class T>
class lnkStack {
private:
	LNode<T>* top;  //指向栈顶的指针
	int size;      //栈中元素个数
public:
	lnkStack() {   //无参构造函数
		top = new LNode<T>;
		top = NULL;
		size = 0;
	}
	void clear();   //清空栈
	bool isEmpty(); //栈是否为空
	bool push(const T item); //入栈
	bool pop(T &item);  //出栈
	void Print();   //打印栈中元素
	~lnkStack() {    //析构函数
		clear();   
	}
};
template<class T>void lnkStack<T>::clear() {
	//清空栈
	LNode<T>* temp;
	while (top!= NULL)
	{
		temp = top;
		top = top->next;
		delete temp;
	}
	size = 0;
}
template<class T>bool lnkStack<T>::isEmpty() {
	//判断栈是否为空
	if (top == NULL) {
		return true;
	}
	else { return false; }
}
template<class T>bool lnkStack<T>::push(const T item) {
	//入栈
	LNode<T>* p = new LNode<T>(item, top);
	top = p;
	size++;
	return true;
}
template<class T>bool lnkStack<T>::pop(T& item) {
	//出栈
	LNode<T>* p;
	if (isEmpty()) {
		cout << "栈为空，无法执行出栈操作" << endl;
		return false;
	}
	else 
	{
		p = top;
		item = p->data;
		top = top->next;
		delete p;
		size--;
		return true;
	}
}
template<class T>void lnkStack<T>::Print() {
	//打印链式栈左右元素
	LNode<T>* temp;
	for (temp = top; temp != NULL; temp = temp->next) {
		cout << temp->data << "<-";
	}
	cout << endl;
}
int main()
{
	//测试程序
	lnkStack<int> s;
	cout << "===========生成链表，开始测试=============" << endl;
	cout << "===========判断链表是否为空（1为空，0为不空）=============" << endl;
	cout << s.isEmpty() << endl;
	cout << "===========开始入栈操作=============" << endl;
	s.push(6); s.push(8); s.push(7); s.push(60); s.push(99); s.push(78); s.push(15); s.push(26);
	cout << "此时链式栈元素="; s.Print();
	cout << "===========开始出栈操作=============" << endl;
	int m;s.pop(m);
	cout << "此时链式栈元素="; s.Print();
	cout << "===========清空栈=============" << endl;
	s.clear();
	cout << "===========判断链表是否为空（1为空，0为不空）=============" << endl;
	cout << s.isEmpty() << endl;
	return 0;
}