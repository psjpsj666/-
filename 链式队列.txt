#include<iostream>
using namespace std;
//定义链表结点
template<class T>
class QNode {
public:
	T data;
	QNode<T>* next;
	QNode(const T info, QNode<T>* nextValue=NULL) {
		data = info;
		next = nextValue;
	}
	QNode(QNode<T>* nextValue = NULL) {
		next = nextValue;
	}
};
//定义链表队列
template<class T>
class lnkQueue {
private:
	QNode<T>* front;     //队头元素指针
	QNode<T>* rear;      //队尾元素指针
	int size;              //队中当前元素的个数
public:
	lnkQueue() {
		//构造函数
		size = 0;
		front=rear = NULL;
	}
	~lnkQueue() {
		//析构函数
		clear();
	}
	void clear();   //清空队列
	bool enQueue(const T item);   //入队
	bool deQueue(T& item);  //出队
	bool getFront(T& item); //返回队首元素
	bool isEmpty();     //判断队列是否为空
	int length() {
		//返回列表长度
		return size;
	}
	void Print();  //打印链表队列各元素
};
template<class T>
void lnkQueue<T>::clear()
{
	//清空队列
	front =rear= NULL;
}
template<class T>bool lnkQueue<T>::isEmpty() {
	//判断队列是否为空
	return front == NULL;
}
template<class T>bool lnkQueue<T>::enQueue(const T item) {
	//item入栈，插入队尾
	if (size == 0) {
		//空队列,让头结点和尾结点都指向这个结点
		rear = front = new QNode<T>(item,NULL);
	}
	else 
	{
		QNode<T>* temp;
		temp = new QNode<T>(item, NULL);
		rear->next = temp;
		rear = rear->next;
	}
	size++;
	return true;
}
template<class T>bool lnkQueue<T>::deQueue(T& item) {
	//出队
	if (size == 0) {
		cout << "队为空，没有元素可以出队" << endl;
		return false;
	}
	else
	{
		item = front->data;
		QNode<T>* temp;
		temp = front;
		front = front->next;
		delete temp;
		if (front == NULL) {
			rear = NULL;
		}
		size--;
		return true;
	}
}
template<class T>bool lnkQueue<T>::getFront(T& item) {
	//返回队首元素
	if (size == 0) {
		cout << "队列为空" << endl;
		return false;
	}
	else {
		item = front->data;
		return true;
	}
}
template<class T>void lnkQueue<T>::Print() {
	//打印队列元素
	QNode<T>* temp;
	cout << "队列=";
	for (temp = front; temp != NULL; temp = temp->next)
	{
		cout << temp->data << " ";
	}
	cout << endl;
}
int main()
{
	//测试程序
	lnkQueue<int> s;    //声明一个空队列
	cout << "==========生成链表队列，测试开始============" << endl;
	cout << "==========判断队列是否为空（1为空，0为不空）============" << endl;
	cout<<s.isEmpty()<<endl;
	cout << "==========开始元素入队============" << endl;
	s.enQueue(4); s.enQueue(5); s.enQueue(47); s.enQueue(24); s.enQueue(64); s.enQueue(74); s.enQueue(79);
	s.Print();
	cout << "==========开始元素出队============" << endl;
	int m1, m2; s.deQueue(m1); s.deQueue(m2);
	s.Print();
	cout << "此时队列长=" << s.length() << endl;
	cout << "==========清空队列============" << endl;
	s.clear();
	cout << "==========判断队列是否为空（1为空，0为不空）============" << endl;
	cout << s.isEmpty() << endl;
	cout << "==========测试结束============" << endl;
	return 0;
}