#include<iostream>
using namespace std;
#define Defaultsize 100
//顺序队列的类模板
template<class T>
class ArrQueue {
private:
	int size;   //队列数组的最大长度
	int front; //队头元素位置
	int rear;  //队尾元素位置
	T* st;     //存储队列元素的指针
public:
	ArrQueue(int sz= Defaultsize) {
		//构造函数
		size = sz + 1;
		rear = 0; front = 1;
		st = new T[size];
	}
	~ArrQueue() {
		//析构函数
		delete[]st;
	}
	void clear()
	{
		//清空队列
		front = rear + 1;
	}
	bool enQueue(const T item); //将item插入队尾，成功返回true，否则为false
	bool deQueue(T& item); //返回队头元素并将其从队列中删除，成功返回true,否则为false
	bool getFront(T& item); //返回队头元素，但不删除
	bool isEmpty();   //若队列已空，返回真
	bool isFull();    //返回真，若队列已满
	int length() const{ //返回队列的长度
		return (size + (rear - front + 1)) % size;
	}
	void Print();   //打印出队列元素
};
template<class T>bool ArrQueue<T>::enQueue(const T item) {
	//入队
	if ((rear + 2) % size == front)
	{
		cout << "队列已满，无法插入" << endl;
		return false;
	}
	else
	{
		//添加新元素
		rear=(rear+1)%size;
		st[rear] = item;
		return true;
	}
}
template<class T>bool ArrQueue<T>::deQueue(T& item) {
	//出队
	if (length() == 0) {
		cout << "队列为空，没有元素可以出列" << endl;
		return false;
	}
	else {
		item = st[front];
		front = (front + 1) % size;  //环形增加
		return true;
	}
}
template<class T>bool ArrQueue<T>::getFront(T& item) {
	//返回队首元素
	if (length() == 0) return false;
	item = st[front];
	return true;
}
template<class T>bool ArrQueue<T>::isEmpty() { //判断队列是否为空
	if (length() == 0) return true;
	else return false;
}
template<class T>bool ArrQueue<T>::isFull() {  //判断队列是否已满
	if (length() == size - 1) return true;
	else return false;
}
template<class T>void ArrQueue<T>::Print() {
	//打印队列元素
	for (int i = front; i <= rear; i++)
	{
		cout << st[i] << " ";
	}
	cout << endl;
}
int main()
{
	//测试程序
	ArrQueue<int> s(50);   //生成一个容量为50的顺序队列
	cout << "============生成队列，开始测试===========" << endl;
	cout << "============判断队列是否为空(1为空，0为不空)===========" << endl;
	cout << s.isEmpty() << endl;
	cout << "============开始元素入队===========" << endl;
	s.enQueue(5); s.enQueue(15); s.enQueue(25); s.enQueue(45); s.enQueue(35); s.enQueue(55); s.enQueue(65); s.enQueue(75);
	cout << "此时队列="; s.Print();
	cout << "============开始元素出队===========" << endl;
	int m1, m2; s.deQueue(m1); s.deQueue(m2);
	cout << "此时队列="; s.Print();
	cout << "队列长度=" << s.length() << endl;
	cout << "============判断队列是否已满(1为满，0为不满)===========" << endl;
	cout << s.isFull() << endl;
	int m3; s.getFront(m3);
	cout << "队首元素=" <<m3<< endl;
	cout << "============将队列清空===========" << endl;
	s.clear();
	cout << "============判断队列是否为空(1为空，0为不空)===========" << endl;
	cout << s.isEmpty() << endl;
	cout << "============测试完毕===========" ;
	return 0;
}