#include<iostream>
using namespace std;
//单链表结点的定义
template<class T>
class LNode {
public:
	T data; //存储链表数据
	LNode<T>* next;  //指向后继结点
	LNode(const T info, LNode<T>*nextValue=NULL) {
		data = info;
		next = nextValue;
	}
	LNode(LNode<T>* nextValue =NULL)
	{
		next = nextValue;
	}
};
//单链表类模板
template<class T>
class SList{
private:
	LNode<T>* head, * tail;
	LNode <T>* setPos(const int p);   //返回位置p处的结点指针
public:
	SList() //无参构造函数
	{
		head = tail = new LNode<T>;
		head->data=tail->data=0;
		head->next = tail;
		tail->next = NULL;
	}
	~SList()
	{   //析构函数
		LNode<T> *temp;
		while (head != NULL)
		{
			temp = head;
			head = head->next;
			delete temp;
		}
	}
	bool isEmpty();   //判断链表是否为空，是，则返回true,否则返回false
	bool insert(const int p,T value);    //在位置p处插入值为value的结点
	bool Delete(const int p);        //删除位置p处的结点
	bool append(T value);           //在链表尾部插入结点
	int length();                   //返回链表长度
	void clear();                   //清空链表
	bool getValue(const int p, T &value);   //返回位置p处的元素
	bool getPos(int &p, T value);          //查找值为value的元素位置
	void Print();                         //打印链表所有结点
};
template<class T>
LNode<T> *SList<T>::setPos(const int p) {
	//返回p位置处的结点指针
	int count = 0;
	if (p == -1)
	{
		return head;
	}
	LNode<T> *q = head->next;
	while (q != NULL && count < p) {
		q = q->next;
		count++;
	}
	return q;
}
template<class T>
bool SList<T>::isEmpty() {
	//判断链表是否为空
	if (head->data == NULL)
	{
		return true;
	}
	else
	{
		return false;
	}
}
template<class T >
void SList<T>::clear() {
	//将链表清空
	LNode<T>* temp;
	while (head != NULL)
	{
		temp = head;
		head = head->next;
		delete temp;
	}
	head = tail = new LNode<T>(NULL);
}
template<class T>
bool SList<T>::insert(const int i, T value) {
	//在位置p处查出元素T
	LNode<T>* p, * q;   //p作为待插结点的前驱,q作为待插结点
	if ((p = setPos(i - 1)) == NULL)
	{
		cout << "插入位置不合法" << endl;
		return false;
	}
	q = new LNode<T>(value, p->next);
	p->next = q;
	if (p == tail)     //如果前驱p是链尾，则要将插入结点变为链尾
 	{
		tail = q;
	}
	return true;
}
template<class T>
bool SList<T>::append(T value) {
	//在链尾插入结点
	LNode<T>* p = new LNode<T>(value, tail->next);
	tail->next = p;
	tail = p;      //tail重置
	return true;
}
template<class T>
int SList<T>::length()
{
	//返回链表的长度
	int count = 0;
	LNode<T> *temp;
	for(temp=head->next;temp!=NULL;temp=temp->next)
	{
		count++;
	}
	return count;
}
template<class T>
bool SList<T>::Delete(const int i) {
	//删除位置p处的结点
	LNode<T>* p, * q;   //p作为待删结点的前驱，q作为待删结点
	if ((p = setPos(i - 1)) == NULL || p==tail)
	{
		cout << "删除位置不合法" << endl;
		return false;
	}
	q = p->next;
	if (q == tail)
	{
		tail = p;
		p->next = NULL;
		delete q;
		return true;
	}
	else
	{
		p->next = q->next;
		delete q;
		return true;
	}
}
template<class T>
bool SList<T>::getPos(int& p, T value) {
	//找到值为value的结点位置
	int count = 0;
	LNode<T>* temp;
	for (temp = head; temp != NULL;temp=temp->next,++count) {
		if (temp->data == value)
		{
			p = count;
			return true;
			break;
		}
	}
	cout << "链表中没有数值="<<value<<"的结点" << endl;
	return false;
}
template<class T>
bool SList<T>::getValue(const int p,T &value) {
	//返回位置p处结点的元素值
	if (p == -1) {
		value = NULL;
		return true;
	}
	LNode<T>* temp;
	temp = head;
	for (int i = 0; i < p; i++)
	{
		temp = temp->next;
	}
	value = temp->data;
	return true;
}
template<class T>
void SList<T>::Print()
{
	//打印出链表中的所有结点元素
	LNode<T>* temp;
	cout << "head->";
	for (temp = head->next; temp != NULL; temp = temp->next)
	{
		cout << temp->data << "->";
	}
	cout <<"NULL"<< endl;
}
int main()
{
	//测试程序
	SList<int> s; //创建一个空链表
	cout << "==========向链表尾部插入元素==========" << endl;
	s.append(5); s.append(67); s.append(2); s.append(8); s.append(99); s.append(100); s.append(12);
	cout << "链表总体结构="; s.Print();
	cout << "==========向链表位置2处插入元素9==========" << endl;
	s.insert(2, 9); s.Print();
	cout << "此时链表长度=" << s.length() << endl;
	cout << "==========把链表位置3处元素删除==========" << endl;
	s.Delete(3); s.Print();
	cout << "==========找到链表位置4处的元素值==========" << endl;
	int n;
	s.getValue(4, n); cout << "元素值=" << n << endl;
	cout << "==========找到链表元素值为99的结点位置==========" << endl;
	int m;
	s.getPos(m, 99); cout << "位置=" <<m<< endl;
	cout << "==========清空链表==========" << endl;
	s.clear(); s.Print();
	cout << "==========判断链表是否为空==========" << endl;
	cout<<s.isEmpty();
	return 0;
}